input       kernel      performance                                     memory
                        mapping     order       simulate    total
11x11       1x11x11     0.6848      0.0237      3.4404      4.1500      265MB
12x12       1x11x11     0.6835      0.5317      12.630      13.846      279MB            
13x13       1x11x11     0.6866      0.8636      28.609      30.160      304MB

input增加, 時間mapping增加一點點,  order增加比較明顯, simulate增加明顯,  memroy增加

11x11       10x11x11    0.7722      1.1589      31.850      33.781      311MB
11x11       100x11x11   1.5837      5.4667      142.95      149.95      753MB

12x12       10x11x11    0.7258      2.8235      127.43      130.98      452MB

12x12       100x11x11   



* window變四倍,  mapping時間差不多, order時間增加, simulate時間就變成4倍, memroy增加不到一倍
* weight matrix變成10倍, mapping時間增加兩倍, order時間增加五倍,simulate時間就變成5倍, memroy增加兩倍多, 時間主要simulate卡住


window 1, matrix 1萬 simulate time = 150, memory = 0.30G
window 4, matrix 1萬 simulate time = 600, memory = 0.45G


caffenet
input 224 224 3             window #
conv1 96x11x11  11616       55x55       time = 150*55*55 = 453750            memory = 55*55/4 * 1.5 * 0.3 = 340G
pool  27x27
conv2 256x5x5   6400        27x27       time = 150*27*27*0.64  = 69984       memory = 27*27/4 * 1.5 * 0.3 = 82G
pool  13x13
conv3 384x3x3   3456        13x13       time = 150*13*13*0.345 = 8745        memory = 13*13/4 * 1.5 * 0.3 = 19G
conv4 384x3x3   3456        13x13       time = 150*13*13*0.345 = 8745        memory = 13*13/4 * 1.5 * 0.3 = 19G
conv5 256x3x3   2304        13x13       time = 150*13*13*0.23  = 5830        memory = 13*13/4 * 1.5 * 0.3 = 19G
fully 4096      692224      1           time = 150*69.2224     = 10383       memory = 0.3 * 69/10 * 2 = 4G
fully 4096      16777216    1           time = 150*1677.7216   = 251658      memory = 0.3 * 1677/10 * 2 = 100G
fully 10                    1

Total time   = 809095s (224Hr)
Total memory = 583 GB

list 3831M
numpy 790M


加速
input   kernel      performance(mapping/order/simulate)     memory
11x11   1x11x11     0.2027/0.0749/3.00                      83/88.6MB

1. 將crossbar array中0改成空的obj
    performance(mapping/order/simulate) 0.136/0.0268/3 
    memory  72/77.5
                             
2. 再轉乘np array
    performance(mapping/order/simulate) 5/0.03/2.9
    memory  85.3/88.5

3. 將crossbar obj直接改用list
    performance(mapping/order/simulate) 0.208/0.07/3.07
    memory  83/88.6
4. 將crossbar obj改成list後, 裡面的bit只記錄start bit, 再轉乘np array
    performance(mapping/order/simulate) 3.9/0.05/2.9
    memory  250/250.5

                    
mapping後67MB
mapping後會生成大量記憶體, controller最慢


Run
mapping時  473.5MB
order後     941MB


otimize1
    目標： 優化order memory用量
    發現: computation order這個list超大, 發現ou內的ou output佔超大改成空的[]
    優化前: 
        mapping 4.375s/  242MB
        order   22.20s/  2.17GB - 242MB
    優化後:
        mapping 4.3s / 242MB
        order   12s / 400MB - 242MB = 160MB

optimize2
    目標: 優化記憶體用量, 記憶體用量大可能會swap in out, 造成效能變低, 瘦身order來減低memory
    觀察: 優化前的memory用量, controller效能
    Model: input: 15x15x1, kernel: 10x11x11x1, bit: 16/16
    優化前:
        neclab6
            Memory: VIRT 2367M, RES 671M, MEM 0.4%
            Performance: mapping 4.5s, Order 20.2s, simulate 1077s
        mac
            Memory: 524.8MB
            Performance: mapping 4.15s, Order: 20.78s
    優化:
        本次優化減少cu_saa event紀錄的input內容, 其實後面只需要知道一個cu_saa event需要做幾次即可, 所以改幾次數。
        減少要記錄的內容可以減少記憶體使用, 再來controller判斷也做了部分優化, 且判斷也會變快！

    優化後:
       mac
            Memory: 319.9MB
            Performance: mapping 4.08, Order: 18.71s
        neclab6
            Memory: VIRT 2203MB , RES 506M, MEM 0.3%
            Performance: mapping 4.3s, Order 16.80s, simulate 1088s (無效)

optimize3
    目標: 減少mapping的memory, 不要先用list再轉乘numpy
    目前只改defatult mapping
    優化後:
        Memory: 167.8MB
        Performance: mapping: 0.097, Order: 17.5
    優化後:(caffenet)
        Memory: 10G
        Performance: mapping: 1107s, Order: 用上面數字算的話需要175倍(53hr)

optimize4
    目標: 優化controller速度, 使用連凱提供方法
    Model: input: 13x13x1, kernel: 10x11x11x1, bit: 16/16
    優化前:
        mac
            Performance: mapping 0.098s, Order: 6.046s, simulate: 364.3s
    1. 改ou erp
    優化後:
        mac:
            Performance: mapping 0.101s, Order: 6.186s, simulate: 358.06s
    2. 改adc erp
    優化後:
        mac:
            Performance: simulate: 355.47s
    3. cu_saa一次全部做完不要每次做一個remove一個, 做完直接清空
    優化後:
        mac:
            Performance: simulate: 352.169s
    4. pe_saa
    優化後:
        mac:
            Performance: simulate: 353.39s
    5. 改act 用dequeue
    優化後:
        mac:
            Performance: simulate: 361.0s
    6. 改write 用dequeue
    優化後:
        mac:
            Performance: simulate: 361.0s
    測試：
        Model: input: 15x15x1, kernel: 10x11x11x1, bit: 16/16
        optimize2的數據
        neclab6
        優化前:
            Performance: simulate 1088s
        優化後:
            Performance: 1014.94s


Lenet
    Mapping: 2922M, 187M, 14.943s
    Order:  9149M, 6409M, 734.04s
    [926, 4616896, 4616896, 4616896, 10718, 10718, 11894, 1176, 33804] 13,941,045
    simulate: 93741s (5800event/39s) 26hr

Alexnet會產生的event約為lenet的722倍


optimize5
    目標: 瘦身computation order
    方法: 16bits不要只生一份就好
    Lenet
        Order: 6409M, 734.04s -> 824M, 50s
        [926, 288556, 288556, 288556, 10718, 10718, 11894, 1176, 33804] 936,080
        simulate: 93741s (5800event/39s) 26hr

    8000 Done event: 20310 time per event 0.09663141283244701 time per cycle 0.24532299956679343
    edram: 2.6799349784851074 ou 44.533835887908936 adc 1.8012521266937256 cusaa 1.7140617370605469 pesaa 0.06391620635986328 act 0.01003122329711914 wr 0.014477252960205078
    iterconeect 32.52555322647095 fetch 0.005879402160644531 trigger 67.94741702079773 state 222.9602987766266 other 115.51902675628662
    t: 489.85399699211

caffenet
    Order生完用了150G, 20557s(5.7Hr)
    events_each_layer: [25267825, 3405024, 105446934, 1181184, 36817137, 53813868, 35174984, 322560, 8999200, 3977344, 963032]
    Total: 275369092



加速simulate time
HW: alexnet
test model: 
    A: inputs8x8x1 - conv10x2x2
    B: inputs6x6x1 - conv10x2x2
    C: inputs6x6x1 - conv10x4x4
Simulate結果
A:
    Cycle 2800 Done event: 817 time per event 0.5605860661117946 time per cycle 0.1635710061447961
    edram: 0.5297369956970215 ou 0.715482234954834 adc 0.1946399211883545 cusaa 0.2883288860321045 pesaa 0.04152965545654297 act 0.009522676467895508 wr 0.005957126617431641
    iterconeect 20.689958810806274 fetch 0.000545501708984375 trigger 2.080472946166992 state 4.720970630645752 other 3.0217092037200928
    t: 32.350971937179565
B:
    Cycle 4200 Done event: 1225 time per event 0.5336263635207196 time per cycle 0.15564102292060852
    edram: 0.5175585746765137 ou 0.6974458694458008 adc 0.20494699478149414 cusaa 0.2582864761352539 pesaa 0.04051017761230469 act 0.009416580200195312 wr 0.005875349044799805
    iterconeect 18.65162968635559 fetch 0.0005710124969482422 trigger 1.8293664455413818 state 4.312772989273071 other 2.797738790512085
    t: 29.37018394470215
C:
    Cycle 2800 Done event: 569 time per event 0.8086812848156492 time per cycle 0.16433559000492096
    edram: 0.5140464305877686 ou 0.6861147880554199 adc 0.18747234344482422 cusaa 0.24140548706054688 pesaa 0.03887033462524414 act 0.008555412292480469 wr 0.005285024642944336
    iterconeect 20.167319536209106 fetch 0.0005350112915039062 trigger 1.9917058944702148 state 4.503977537155151 other 2.9534733295440674
    t: 31.343791007995605

optimize6
    優化interconnect
    刪除不必要的判斷, 改成dequeue
    C:
        Cycle 1200 Done event: 214 time per event 0.8883806221953062 time per cycle 0.15842787841955822
        edram: 0.5178956985473633 ou 0.7218008041381836 adc 0.20238161087036133 cusaa 0.2627379894256592 pesaa 0.04226517677307129 act 0.00950765609741211 wr 0.004953861236572266
        iterconeect 19.618988752365112 fetch 0.0005323886871337891 trigger 1.9597716331481934 state 4.539716958999634 other 2.9101691246032715
        t: 30.839995861053467
    刪除router的function call
    C:
        Cycle 2800 Done event: 569 time per event 0.7802866992715792 time per cycle 0.1585654045854296
        edram: 0.5590112209320068 ou 0.7027602195739746 adc 0.1911756992340088 cusaa 0.2594571113586426 pesaa 0.04352092742919922 act 0.011132001876831055 wr 0.0063838958740234375
        iterconeect 20.813591241836548 fetch 0.0005269050598144531 trigger 2.029773235321045 state 4.5836710929870605 other 2.960547924041748
        t: 32.211719036102295

    


    Mapping policy:  Default Mapping
Model: Caffenet
Convolution 0
Pooling 1
Convolution 2
Pooling 3
Convolution 4
Convolution 5
Convolution 6
--- Mapping is finished in 194.98162269592285 seconds ---

Scheduling policy: Non-pipeline

--- Generate computation order graph ---
Generate layer 0 convolution
Generate layer 1 pooling
Generate layer 2 convolution
Generate layer 3 pooling
Generate layer 4 convolution
Generate layer 5 convolution
Generate layer 6 convolution
Order generated!
--- Computation order graph is generated in 19396.620190382004 seconds ---

--- Power and performance simulation---
events_each_layer: [25273875, 12990240, 106169454, 4335360, 41686812, 57369588, 35442680]
Computation order length: 283268009


Memory紀錄
    Mapping後: 30G/ 24.6G


最新Alexnet效能
    --- Mapping is finished in 2427.0653471946716 seconds ---
    --- Computation order graph is generated in 20544.71760749817 seconds ---
    events_each_layer: [25273875, 12990240, 106169454, 4335360, 41686812, 57369588, 35511800, 1207296, 9500928, 4109312, 971256]
    Computation order length: 299125921
    Memory: 110G / 108G

    Cycle 7700 Done event: 16659 time per event 0.10876826906813902 time per cycle 0.23532085666408786
    edram: 0.05648374557495117 ou 0.13968253135681152 adc 0.016870498657226562 cusaa 0.03966665267944336 pesaa 0.005704164505004883 act 0.0018112659454345703 wr 0.006666421890258789
    iterconeect 2.3282124996185303 fetch 5.245208740234375e-05 trigger 0.26551222801208496 state 0.5685746669769287 other 0.41303443908691406
    t: 3.8492136001586914

    Traceback (most recent call last):
    File "PP_sim.py", line 202, in <module>
        main()
    File "PP_sim.py", line 94, in main
        controller.run()
    File "/home/r06/weiting/PP_sim/Controller.py", line 243, in run
        self.PE_array[pe_id].edram_buffer_i.buffer.remove([nlayer, data])
    ValueError: list.remove(x): x not in list
    此錯誤應該是buffer不夠產生的

